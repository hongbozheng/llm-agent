import google.generativeai as genai
import json
import openai
import os
import re
from code_executor import exec_debug
from config_data.rule import get_rule_prompt_text
from datetime import datetime
from llm_client import call_llm
from logger import log, log_step
from openai import OpenAI
from utils import sanitize_for_filename


def exec_step(llm, temp, strategy, i):
    ctx = ""
    for k in range(0, i):
        step = strategy['strategy'][k]
        action = step['action']
        justification = step['justification']

        ctx += f"Step {k} {action}\n{justification}\n\n"

    prompt = strategy['prompt']

    sys_prompt = f"""
You are a quantitative trading assistant helping to build a strategy.

User's original question:
{prompt}

Steps completed so far:
{ctx}
""".strip()

    if i > 0:
        file_path = strategy['code-path']
        f = open(file_path, 'r')
        code = f.read().strip()
        f.close()
        sys_prompt += f"\n\nPython code implemented so far:\n\n{code}"

    sys_prompt += (
        "\n\nCommon Errors to Avoid:\n"
        + get_rule_prompt_text()
    )

    step = strategy['strategy'][i]

    usr_prompt = f"""
Current step:
- {step['action']}
- justification: {step['justification']}

Please generate Python code that completes this step, based on all context so far.
Respond ONLY with a code block.
""".strip()

    if i == len(strategy["strategy"]) - 1:
        usr_prompt += f"""
\n\nAt the end of this step, please output a Python dictionary called
`strategy_info` with the following fields: strategy_type, assets, lookback_days,
indicators, evaluation_metrics. \nRespond only with a code block as before.
""".strip()

    content = call_llm(llm, sys_prompt, usr_prompt, temp)

    if llm == "gpt-4o" or llm == "deepseek":
        if content.startswith("```") and content.endswith("```"):
            content = content[
                      content.find('\n') + 1: content.rfind('```')].strip()
    elif llm.startswith("gemini"):
        content = content.text.strip()
        if content.startswith("```json"):
            content = content[len("```json"):].strip()
        if content.startswith("```python"):
            content = content[len("```python"):].strip()
        if content.endswith("```"):
            content = content[:-3].strip()

    match = re.search(r"```python(.*?)```", content, re.DOTALL)
    return match.group(1).strip() if match else content


def exec_strategy(llm, temp, timeout, max_att, file_path):
    file = open(file_path, 'r')
    strategy = json.load(file)
    file.close()

    n_steps = len(strategy['strategy'])

    path = f"python-code"
    os.makedirs(path, exist_ok=True)
    file_path = os.path.join(path, f"{llm}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.py")
    strategy['code-path'] = file_path

    for i in range(n_steps):
        log_step(i, strategy['strategy'][i]['action'])

        code = exec_step(llm, temp, strategy, i)

        if code is not None:
            file = open(file_path, 'a')
            if i == 0:
                file.write(code)
            else:
                file.write(f"\n\n{code}")
            file.close()

            log(f"ðŸ’¾ Saved step {i} code to `{file_path}`")
            log("~" * 75)

            _ = exec_debug(
                "process", timeout, max_att, llm, temp, file_path
            )

    # TODO: organize code of last step & summary
    path = "summary"
    os.makedirs(path, exist_ok=True)
    prompt = sanitize_for_filename(strategy['prompt'])
    filename = f"{llm}-{prompt}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json"
    file_path = os.path.join(path, filename)

    return


# Helper for comparing LLM results
def compare_strategy_summaries(summary_path_1, summary_path_2, question):
    # Load both summaries
    with open(summary_path_1, "r") as f:
        summary_1 = json.load(f)
    with open(summary_path_2, "r") as f:
        summary_2 = json.load(f)

    # Convert both summaries to string
    def format_summary(summary, label):
        result = f"### Strategy from {label}\n"
        result += f"**Question**: {summary['question']}\n\n"
        for i, step in enumerate(summary["steps"]):
            result += f"**Step {i + 1}: {step['step']}**\n"
            result += f"- Reasoning: {step['reasoning']}\n"
            result += f"- Code:\n```\n{step['code']}\n```\n\n"
        return result

    summary_text_1 = format_summary(summary_1, "GPT-4o")
    summary_text_2 = format_summary(summary_2, "DeepSeek")

    # Final prompt
    system_prompt = "You are a financial strategy analyst. Compare two strategies generated by different LLM agents."
    user_prompt = f"""
Compare the two strategies below for the following finance question:
**{question}**

Instructions:
- Evaluate clarity and reasoning of the steps
- Evaluate usefulness and correctness of the code
- Choose the better strategy and explain why
- Provide a one-paragraph natural language summary as final judgment

{summary_text_1}

{summary_text_2}
"""

    print("\n[INFO] Asking GPT-4o to compare strategies...")

    # Send to GPT-4o
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0.7
    )

    content = response.choices[0].message.content.strip()
    print("\n===== ðŸ§  Comparison Result =====")
    print(content)

    # Optionally save to file
    os.makedirs("comparisons", exist_ok=True)
    safe_name = re.sub(r'\s+', '_', question.strip())[:100]
    filename = f"compare_{safe_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    path = os.path.join("comparisons", filename)
    with open(path, "w") as f:
        f.write(content)
    print(f"\nâœ… [INFO] Comparison saved to: {path}")
